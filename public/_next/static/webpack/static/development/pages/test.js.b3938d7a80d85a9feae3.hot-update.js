webpackHotUpdate("static/development/pages/test.js",{

/***/ "./components/RTCHome.js":
/*!*******************************!*\
  !*** ./components/RTCHome.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/websocketservice */ \"./services/websocketservice.js\");\n\n\n\nvar _this = undefined,\n    _jsxFileName = \"/Users/kapilgahlot/Desktop/code/node/poc/kss/rtc/components/RTCHome.js\",\n    _s = $RefreshSig$();\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement;\n\n\nvar peerConnection = null;\nvar RTCPeerConnection = null;\nvar RTCSessionDescription = null;\nvar receiveBuffer = [];\nvar receivedSize = 0;\nvar bytesPrev = 0;\nvar timestampPrev = 0;\nvar timestampStart;\nvar statsInterval = null;\nvar bitrateMax = 0;\nvar sentFileName = \"\";\nvar sentFileSize = 0;\nvar receiveChannel;\nvar downloadAnchor = {};\n\nvar setUpSocketEvents = function setUpSocketEvents(setPeers) {\n  _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].on(\"connect\", function () {\n    console.log(\"connected socket id : \", _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].id);\n  });\n  _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].on(\"disconnect\", function () {\n    console.log(\"disconnected socket id : \", _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].id);\n  });\n  _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].on(\"hello\", function (msg) {\n    console.log(\"Hello : \", msg);\n  });\n  _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].on(\"users\", function (users) {\n    console.log(\"users : \", users);\n    var peers = [];\n    Object.keys(users).map(function (key) {\n      peers.push({\n        id: key,\n        name: users[key]\n      });\n    });\n    setPeers(peers);\n  });\n  _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].on(\"rtc-vchat-offer\", /*#__PURE__*/function () {\n    var _ref = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(senderId, offer) {\n      var ve1, answer;\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"rtc-vchat-offer : \", senderId, offer);\n              ve1 = document.querySelector(\".video-chat-container\");\n\n              if (ve1 && ve1.style) {\n                if (ve1.style.visibility !== \"visible\") {\n                  peerConnection.addEventListener('datachannel', receiveChannelCallback);\n                  downloadAnchor = document.querySelector('a#download');\n                }\n\n                ve1.style.visibility = \"visible\";\n              }\n\n              sessionStorage.setItem(\"video-receiver\", true);\n              sessionStorage.setItem(\"peerId\", senderId);\n              _context.next = 7;\n              return peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n\n            case 7:\n              _context.next = 9;\n              return peerConnection.createAnswer();\n\n            case 9:\n              answer = _context.sent;\n              _context.next = 12;\n              return peerConnection.setLocalDescription(new RTCSessionDescription(answer));\n\n            case 12:\n              _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].emit(\"rtc-vchat-conn-answer\", _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].id, senderId, answer);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].on(\"rtc-vchat-answer\", /*#__PURE__*/function () {\n    var _ref2 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2(receiverId, answer) {\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(\"rtc-vchat-answer : \", receiverId, answer);\n              _context2.next = 3;\n              return peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n\n            case 3:\n              if (!window.isAlreadyCalling) {\n                callUser(receiverId);\n                window.isAlreadyCalling = true;\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].on(\"rtc-ice-candidate\", function (candidate) {\n    console.log(\"rtc-ice-candidate : \", candidate);\n    peerConnection.addIceCandidate(candidate).then(function (res) {\n      console.log(\"initiator add icecandidate success: \", res);\n    })[\"catch\"](function (err) {\n      console.log(\"initiator add icecandidate error : \", err);\n    });\n  });\n  _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].on(\"rtc-sending-file\", function (sentFileSize, sentFileName) {\n    console.log(\"sentFileSize : \", sentFileSize);\n    console.log(\"sentFileName : \", sentFileName);\n  });\n};\n\nvar sendMsg = function sendMsg(userName) {\n  _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].emit(\"hi\", \"\".concat(_services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].id), userName);\n};\n\nif (true) {\n  RTCPeerConnection = window.RTCPeerConnection;\n  RTCSessionDescription = window.RTCSessionDescription;\n}\n\nvar getAVPermissions = function getAVPermissions() {\n  navigator.getUserMedia({\n    video: true,\n    audio: true\n  }, function (stream) {\n    var localVideo = document.getElementById(\"local-video\");\n\n    if (localVideo) {\n      localVideo.srcObject = stream;\n    }\n\n    stream.getTracks().forEach(function (track) {\n      return peerConnection.addTrack(track, stream);\n    });\n  }, function (error) {\n    console.warn(error.message);\n  });\n};\n\nvar setupRTC = function setupRTC() {\n  peerConnection = new RTCPeerConnection({\n    iceServers: [{\n      urls: 'stun:stun.l.google.com:19302'\n    }]\n  });\n  peerConnection.addEventListener('icecandidate', function (e) {\n    return onIceCandidate(peerConnection, e);\n  });\n  peerConnection.addEventListener('iceconnectionstatechange', function (e) {\n    return onIceStateChange(peerConnection, e);\n  });\n\n  peerConnection.ontrack = function (_ref3) {\n    var streams = _ref3.streams;\n    console.log(\"got steam : \", streams);\n    var remoteVideo = document.getElementById(\"remote-video\");\n\n    if (remoteVideo) {\n      remoteVideo.srcObject = streams[0];\n    }\n  };\n};\n\nvar callUser = /*#__PURE__*/function () {\n  var _ref4 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3(peerId) {\n    var ve1, offer;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log(\"calling peer : \", peerId);\n            ve1 = document.querySelector(\".video-chat-container\");\n\n            if (ve1 && ve1.style) {\n              if (ve1.style.visibility !== \"visible\") {\n                window.sendChannel = peerConnection.createDataChannel('sendDataChannel');\n                sendChannel.binaryType = 'arraybuffer';\n                console.log('Created send data channel');\n                sendChannel.addEventListener('open', onSendChannelStateChange);\n                sendChannel.addEventListener('close', onSendChannelStateChange);\n                sendChannel.addEventListener('error', function (error) {\n                  return console.error('Error in sendChannel:', error);\n                });\n              }\n\n              ve1.style.visibility = \"visible\";\n            }\n\n            _context3.next = 5;\n            return peerConnection.createOffer({\n              offerToReceiveAudio: 1,\n              offerToReceiveVideo: 1\n            });\n\n          case 5:\n            offer = _context3.sent;\n            console.log(\"offer : \", offer);\n            _context3.next = 9;\n            return peerConnection.setLocalDescription(new RTCSessionDescription(offer));\n\n          case 9:\n            sessionStorage.setItem(\"video-initiator\", true);\n            _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].emit(\"rtc-vchat-conn-offer\", _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].id, peerId, offer);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function callUser(_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar getName = function getName() {\n  return \"name\";\n};\n\nvar onIceCandidate = /*#__PURE__*/function () {\n  var _ref5 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4(pc, event) {\n    var peerId;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            peerId = sessionStorage.getItem(\"peerId\");\n\n            if (event.candidate) {\n              _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].emit(\"rtc-add-icecandidate\", event.candidate, peerId);\n            }\n\n            console.log(\"\".concat(getName(pc), \" ICE candidate:\\n\").concat(event.candidate ? event.candidate.candidate : '(null)'));\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function onIceCandidate(_x6, _x7) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar onIceStateChange = function onIceStateChange(pc, event) {\n  if (pc) {\n    console.log(\"\".concat(getName(pc), \" ICE state: \").concat(pc.iceConnectionState));\n    console.log('ICE state change event: ', event);\n  }\n};\n\nvar sendData = function sendData(file) {\n  if (!file) {\n    return;\n  }\n\n  console.log(\"File is \".concat([file.name, file.size, file.type, file.lastModified].join(' '))); // Handle 0 size files.\n\n  statusMessage.textContent = '';\n  downloadAnchor.textContent = '';\n\n  if (file.size === 0) {\n    // bitrateDiv.innerHTML = '';\n    statusMessage.textContent = 'File is empty, please select a non-empty file'; // closeDataChannels();\n\n    return;\n  } // sendProgress.max = file.size;\n  // receiveProgress.max = file.size;\n\n\n  var chunkSize = 16384;\n  fileReader = new FileReader();\n  var offset = 0;\n  fileReader.addEventListener('error', function (error) {\n    return console.error('Error reading file:', error);\n  });\n  fileReader.addEventListener('abort', function (event) {\n    return console.log('File reading aborted:', event);\n  });\n  fileReader.addEventListener('load', function (e) {\n    console.log('FileRead.onload ', e);\n    sendChannel.send(e.target.result);\n    offset += e.target.result.byteLength; // sendProgress.value = offset;\n\n    if (offset < file.size) {\n      readSlice(offset);\n    }\n  });\n\n  var readSlice = function readSlice(o) {\n    console.log('readSlice ', o);\n    var slice = file.slice(offset, o + chunkSize);\n    fileReader.readAsArrayBuffer(slice);\n  };\n\n  readSlice(0);\n};\n\nvar closeDataChannels = function closeDataChannels() {\n  console.log('Closing data channels');\n\n  if (typeof sendChannel !== 'undefined') {\n    sendChannel.close();\n    console.log(\"Closed data channel with label: \".concat(sendChannel.label));\n  }\n\n  if (receiveChannel) {\n    receiveChannel.close();\n    console.log(\"Closed data channel with label: \".concat(receiveChannel.label));\n  }\n\n  peerConnection.close(); // remoteConnection.close();\n\n  peerConnection = null; // remoteConnection = null;\n\n  console.log('Closed peer connections'); // re-enable the file select\n\n  fileInput.disabled = false; // abortButton.disabled = true;\n\n  sendFileButton.disabled = false;\n};\n\nvar onSendChannelStateChange = function onSendChannelStateChange() {\n  var readyState = sendChannel.readyState;\n  console.log(\"Send channel state is: \".concat(readyState));\n\n  if (readyState === 'open') {\n    var initiator = sessionStorage.getItem(\"video-initiator\");\n    console.log(\"initiator : \", initiator);\n\n    if (initiator) {\n      sendData();\n    }\n  }\n};\n\nvar receiveChannelCallback = function receiveChannelCallback(event) {\n  console.log('Receive Channel Callback');\n  receiveChannel = event.channel;\n  receiveChannel.binaryType = 'arraybuffer';\n  receiveChannel.onmessage = onReceiveMessageCallback;\n  receiveChannel.onopen = onReceiveChannelStateChange;\n  receiveChannel.onclose = onReceiveChannelStateChange;\n  receivedSize = 0;\n  bitrateMax = 0;\n  downloadAnchor.textContent = '';\n  downloadAnchor.removeAttribute('download');\n\n  if (downloadAnchor.href) {\n    URL.revokeObjectURL(downloadAnchor.href);\n    downloadAnchor.removeAttribute('href');\n  }\n};\n\nvar onReceiveMessageCallback = function onReceiveMessageCallback(event) {\n  console.log(\"Received Message \".concat(event.data.byteLength));\n  receiveBuffer.push(event.data);\n  receivedSize += event.data.byteLength; // receiveProgress.value = receivedSize;\n  // we are assuming that our signaling protocol told\n  // about the expected file size (and name, hash, etc).\n  // const file = fileInput.files[0];\n\n  if (receivedSize === sentFileSize) {\n    var received = new Blob(receiveBuffer);\n    receiveBuffer = [];\n    downloadAnchor.href = URL.createObjectURL(received);\n    downloadAnchor.download = sentFileName;\n    downloadAnchor.textContent = \"Click to download '\".concat(sentFileName, \"' (\").concat(sentFileSize, \" bytes)\");\n    downloadAnchor.style.display = 'block';\n    var bitrate = Math.round(receivedSize * 8 / (new Date().getTime() - timestampStart)); // bitrateDiv.innerHTML =\n    //   `<strong>Average Bitrate:</strong> ${bitrate} kbits/sec (max: ${bitrateMax} kbits/sec)`;\n    //   if (statsInterval) {\n    //     clearInterval(statsInterval);\n    //     statsInterval = null;\n    //   }\n    // closeDataChannels();\n  }\n};\n\nvar onReceiveChannelStateChange = /*#__PURE__*/function () {\n  var _ref6 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5() {\n    var readyState;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            readyState = receiveChannel.readyState;\n            console.log(\"Receive channel state is: \".concat(readyState));\n\n            if (readyState === 'open') {\n              timestampStart = new Date().getTime();\n              timestampPrev = timestampStart; // statsInterval = setInterval(displayStats, 500);\n              // await displayStats();\n            }\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function onReceiveChannelStateChange() {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar RTCHome = function RTCHome() {\n  _s();\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])([]),\n      peers = _useState[0],\n      setPeers = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(\"\"),\n      userName = _useState2[0],\n      setUserName = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(\"\"),\n      file = _useState3[0],\n      setFile = _useState3[1];\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    console.log(\"Rendering\");\n    setUpSocketEvents(setPeers);\n    getAVPermissions();\n    setupRTC();\n  }, []);\n\n  var renderPeers = function renderPeers() {\n    return peers.map(function (peer) {\n      return __jsx(\"div\", {\n        key: peer.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 21\n        }\n      }, __jsx(\"span\", {\n        className: \"w-1/2 bg-gray-200 border border-double border-red-200 rounded-md py-2 my-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 21\n        }\n      }, peer.id, \" --- \", peer.name), __jsx(\"button\", {\n        className: \"w-20 mr-10 rounded-md bg-blue-500 text-white\",\n        onClick: function onClick() {\n          callUser(peer.id);\n          sessionStorage.setItem(\"peerId\", peer.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }\n      }, \"Video Call\"));\n    });\n  };\n\n  var changeUserName = function changeUserName(e) {\n    var name = e.target.value;\n    setUserName(name);\n  };\n\n  var handleFileInputChange = function handleFileInputChange(e) {\n    var file = e.target.files[0];\n\n    if (!file) {\n      console.log('No file chosen');\n    } else {\n      setFile(file);\n      sendFileButton.disabled = false;\n      var peerId = sessionStorage.getItem(\"peerId\");\n      _services_websocketservice__WEBPACK_IMPORTED_MODULE_4__[\"socket\"].emit(\"send-file-size\", peerId, file.size, file.name);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"jsx-1266945966\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    className: \"jsx-1266945966\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }\n  }, \"RTC Home\"), __jsx(\"div\", {\n    className: \"jsx-1266945966\" + \" \" + \"my-10\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }\n  }, renderPeers()), __jsx(\"div\", {\n    className: \"jsx-1266945966\" + \" \" + \"my-10 flex flex-row justify-start content-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"your name\",\n    value: userName,\n    onChange: changeUserName,\n    className: \"jsx-1266945966\" + \" \" + \"w-60 text-sm text-black placeholder-gray-500 border border-blue-200 rounded-md py-2 pl-10\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 17\n    }\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      sendMsg(userName);\n      setUserName(\"\");\n    },\n    className: \"jsx-1266945966\" + \" \" + \"w-20 ml-10 rounded-md bg-green-500 text-white\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 17\n    }\n  }, \"Set Name\")), __jsx(\"div\", {\n    className: \"jsx-1266945966\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    id: \"fileInput\",\n    name: \"files\",\n    onChange: handleFileInputChange,\n    className: \"jsx-1266945966\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 17\n    }\n  }), __jsx(\"button\", {\n    disabled: true,\n    id: \"sendFile\",\n    onClick: function onClick() {\n      return sendData(file);\n    },\n    className: \"jsx-1266945966\" + \" \" + \"w-20 mr-10 rounded-md bg-blue-500 text-white\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 17\n    }\n  }, \"Send\"), __jsx(\"div\", {\n    className: \"jsx-1266945966\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 17\n    }\n  }, __jsx(\"a\", {\n    id: \"download\",\n    className: \"jsx-1266945966\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 21\n    }\n  }), __jsx(\"span\", {\n    id: \"status\",\n    className: \"jsx-1266945966\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 21\n    }\n  }))), __jsx(\"div\", {\n    className: \"jsx-1266945966\" + \" \" + \"video-chat-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"jsx-1266945966\" + \" \" + \"video-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 17\n    }\n  }, __jsx(\"video\", {\n    autoPlay: true,\n    id: \"remote-video\",\n    className: \"jsx-1266945966\" + \" \" + \"remote-video\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 21\n    }\n  }), __jsx(\"video\", {\n    autoPlay: true,\n    muted: true,\n    id: \"local-video\",\n    className: \"jsx-1266945966\" + \" \" + \"local-video\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 21\n    }\n  }))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"1266945966\",\n    __self: _this\n  }, \".video-chat-container.jsx-1266945966{padding:0 20px;-webkit-flex:1 1;-ms-flex:1 1;flex:1 1;position:relative;margin-left:30px;margin-top:100px;visibility:hidden;}.remote-video.jsx-1266945966{border:1px solid #cddfe7;width:100%;height:100%;box-shadow:0px 3px 6px rgba(0,0,0,0.2);}.local-video.jsx-1266945966{position:absolute;border:1px solid #cddfe7;bottom:20px;right:40px;box-shadow:0px 3px 6px rgba(0,0,0,0.2);border-radius:5px;width:150px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9rYXBpbGdhaGxvdC9EZXNrdG9wL2NvZGUvbm9kZS9wb2Mva3NzL3J0Yy9jb21wb25lbnRzL1JUQ0hvbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMFl3QixBQUVrQixBQVNVLEFBT1AsZUFmVCxHQWdCZ0IsT0FQZCxXQUNDLE9BT0EsS0FOOEIsTUFWeEIsQ0FpQlAsV0FDK0IsTUFqQnpCLGVBVW5CLEVBVG1CLGdCQWlCQyxDQWhCQSxpQkFpQk4sQ0FoQmQsV0FpQkEiLCJmaWxlIjoiL1VzZXJzL2thcGlsZ2FobG90L0Rlc2t0b3AvY29kZS9ub2RlL3BvYy9rc3MvcnRjL2NvbXBvbmVudHMvUlRDSG9tZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IHsgc29ja2V0IH0gZnJvbSBcIi4uL3NlcnZpY2VzL3dlYnNvY2tldHNlcnZpY2VcIlxuXG5sZXQgcGVlckNvbm5lY3Rpb24gPSBudWxsXG5sZXQgUlRDUGVlckNvbm5lY3Rpb24gPSBudWxsXG5sZXQgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uID0gbnVsbFxubGV0IHJlY2VpdmVCdWZmZXIgPSBbXTtcbmxldCByZWNlaXZlZFNpemUgPSAwO1xuXG5sZXQgYnl0ZXNQcmV2ID0gMDtcbmxldCB0aW1lc3RhbXBQcmV2ID0gMDtcbmxldCB0aW1lc3RhbXBTdGFydDtcbmxldCBzdGF0c0ludGVydmFsID0gbnVsbDtcbmxldCBiaXRyYXRlTWF4ID0gMDtcbmxldCBzZW50RmlsZU5hbWUgPSBcIlwiO1xubGV0IHNlbnRGaWxlU2l6ZSA9IDA7XG5cbmxldCByZWNlaXZlQ2hhbm5lbDtcblxubGV0IGRvd25sb2FkQW5jaG9yID0ge307XG5cbmNvbnN0IHNldFVwU29ja2V0RXZlbnRzID0gKHNldFBlZXJzKSA9PiB7XG4gICAgc29ja2V0Lm9uKFwiY29ubmVjdFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29ubmVjdGVkIHNvY2tldCBpZCA6IFwiLCBzb2NrZXQuaWQpXG4gICAgfSk7XG4gICAgXG4gICAgc29ja2V0Lm9uKFwiZGlzY29ubmVjdFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGlzY29ubmVjdGVkIHNvY2tldCBpZCA6IFwiLCBzb2NrZXQuaWQpXG4gICAgfSk7XG4gICAgXG4gICAgc29ja2V0Lm9uKFwiaGVsbG9cIiwgKG1zZykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkhlbGxvIDogXCIsIG1zZylcbiAgICB9KVxuICAgIFxuICAgIHNvY2tldC5vbihcInVzZXJzXCIsICh1c2VycykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcInVzZXJzIDogXCIsIHVzZXJzKVxuICAgICAgICBjb25zdCBwZWVycyA9IFtdXG4gICAgICAgIE9iamVjdC5rZXlzKHVzZXJzKS5tYXAoa2V5ID0+IHtcbiAgICAgICAgICAgIHBlZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIGlkOiBrZXksXG4gICAgICAgICAgICAgICAgbmFtZTogdXNlcnNba2V5XVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgc2V0UGVlcnMocGVlcnMpXG4gICAgfSlcblxuICAgIHNvY2tldC5vbihcInJ0Yy12Y2hhdC1vZmZlclwiLCBhc3luYyAoc2VuZGVySWQsIG9mZmVyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicnRjLXZjaGF0LW9mZmVyIDogXCIsIHNlbmRlcklkLCBvZmZlcilcbiAgICAgICAgbGV0IHZlMSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudmlkZW8tY2hhdC1jb250YWluZXJcIilcbiAgICAgICAgaWYodmUxICYmIHZlMS5zdHlsZSkge1xuICAgICAgICAgICAgaWYodmUxLnN0eWxlLnZpc2liaWxpdHkgIT09IFwidmlzaWJsZVwiKSB7XG4gICAgICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignZGF0YWNoYW5uZWwnLCByZWNlaXZlQ2hhbm5lbENhbGxiYWNrKVxuICAgICAgICAgICAgICAgIGRvd25sb2FkQW5jaG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYSNkb3dubG9hZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmUxLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIlxuICAgICAgICB9XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJ2aWRlby1yZWNlaXZlclwiLCB0cnVlKVxuICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicGVlcklkXCIsIHNlbmRlcklkKVxuICAgICAgICBhd2FpdCBwZWVyQ29ubmVjdGlvbi5zZXRSZW1vdGVEZXNjcmlwdGlvbihcbiAgICAgICAgICAgIG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24ob2ZmZXIpXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgcGVlckNvbm5lY3Rpb24uY3JlYXRlQW5zd2VyKClcbiAgICAgICAgYXdhaXQgcGVlckNvbm5lY3Rpb24uc2V0TG9jYWxEZXNjcmlwdGlvbihuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKGFuc3dlcikpXG4gICAgICAgIHNvY2tldC5lbWl0KFwicnRjLXZjaGF0LWNvbm4tYW5zd2VyXCIsIHNvY2tldC5pZCwgc2VuZGVySWQsIGFuc3dlciApXG4gICAgfSlcbiAgICBzb2NrZXQub24oXCJydGMtdmNoYXQtYW5zd2VyXCIsIGFzeW5jIChyZWNlaXZlcklkLCBhbnN3ZXIpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJydGMtdmNoYXQtYW5zd2VyIDogXCIsIHJlY2VpdmVySWQsIGFuc3dlcilcbiAgICAgICAgYXdhaXQgcGVlckNvbm5lY3Rpb24uc2V0UmVtb3RlRGVzY3JpcHRpb24oXG4gICAgICAgICAgICBuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKGFuc3dlcilcbiAgICAgICAgKVxuICAgICAgICBpZiAoIXdpbmRvdy5pc0FscmVhZHlDYWxsaW5nKSB7XG4gICAgICAgICAgICBjYWxsVXNlcihyZWNlaXZlcklkKTtcbiAgICAgICAgICAgIHdpbmRvdy5pc0FscmVhZHlDYWxsaW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgc29ja2V0Lm9uKFwicnRjLWljZS1jYW5kaWRhdGVcIiwgKGNhbmRpZGF0ZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcInJ0Yy1pY2UtY2FuZGlkYXRlIDogXCIsIGNhbmRpZGF0ZSlcbiAgICAgICAgcGVlckNvbm5lY3Rpb24uYWRkSWNlQ2FuZGlkYXRlKGNhbmRpZGF0ZSlcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImluaXRpYXRvciBhZGQgaWNlY2FuZGlkYXRlIHN1Y2Nlc3M6IFwiLCByZXMpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImluaXRpYXRvciBhZGQgaWNlY2FuZGlkYXRlIGVycm9yIDogXCIsIGVycilcbiAgICAgICAgICAgIH0pXG4gICAgfSlcbiAgICBzb2NrZXQub24oXCJydGMtc2VuZGluZy1maWxlXCIsIChzZW50RmlsZVNpemUsIHNlbnRGaWxlTmFtZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcInNlbnRGaWxlU2l6ZSA6IFwiLCBzZW50RmlsZVNpemUpXG4gICAgICAgIGNvbnNvbGUubG9nKFwic2VudEZpbGVOYW1lIDogXCIsIHNlbnRGaWxlTmFtZSlcbiAgICB9KVxufVxuXG5jb25zdCBzZW5kTXNnID0gKHVzZXJOYW1lKSA9PiB7XG4gICAgc29ja2V0LmVtaXQoXCJoaVwiLCBgJHtzb2NrZXQuaWR9YCwgdXNlck5hbWUpXG59XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgUlRDUGVlckNvbm5lY3Rpb24gPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb25cbiAgICBSVENTZXNzaW9uRGVzY3JpcHRpb24gPSB3aW5kb3cuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uXG59XG5cbmNvbnN0IGdldEFWUGVybWlzc2lvbnMgPSAoKSA9PiB7XG4gICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYShcbiAgICAgICAgeyB2aWRlbzogdHJ1ZSwgYXVkaW86IHRydWUgfSxcbiAgICAgICAgc3RyZWFtID0+IHtcbiAgICAgICAgICBjb25zdCBsb2NhbFZpZGVvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2NhbC12aWRlb1wiKTtcbiAgICAgICAgICBpZiAobG9jYWxWaWRlbykge1xuICAgICAgICAgICAgbG9jYWxWaWRlby5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHBlZXJDb25uZWN0aW9uLmFkZFRyYWNrKHRyYWNrLCBzdHJlYW0pKVxuICAgICAgICB9LFxuICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgKVxufVxuXG5jb25zdCBzZXR1cFJUQyA9ICgpID0+IHtcbiAgICBwZWVyQ29ubmVjdGlvbiA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbih7XG4gICAgICAgIGljZVNlcnZlcnM6IFtcbiAgICAgICAgICAgIHt1cmxzOiAnc3R1bjpzdHVuLmwuZ29vZ2xlLmNvbToxOTMwMid9XG4gICAgICAgIF1cbiAgICB9KTtcblxuICAgIHBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNhbmRpZGF0ZScsIGUgPT4gb25JY2VDYW5kaWRhdGUocGVlckNvbm5lY3Rpb24sIGUpKVxuICAgIHBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsIGUgPT4gb25JY2VTdGF0ZUNoYW5nZShwZWVyQ29ubmVjdGlvbiwgZSkpXG5cbiAgICBwZWVyQ29ubmVjdGlvbi5vbnRyYWNrID0gZnVuY3Rpb24oeyBzdHJlYW1zIH0pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJnb3Qgc3RlYW0gOiBcIiwgc3RyZWFtcylcbiAgICAgICBjb25zdCByZW1vdGVWaWRlbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVtb3RlLXZpZGVvXCIpO1xuICAgICAgIGlmIChyZW1vdGVWaWRlbykge1xuICAgICAgICAgcmVtb3RlVmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtc1swXTtcbiAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBjYWxsVXNlciA9IGFzeW5jIChwZWVySWQpID0+IHtcbiAgIGNvbnNvbGUubG9nKFwiY2FsbGluZyBwZWVyIDogXCIsIHBlZXJJZClcbiAgIGxldCB2ZTEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnZpZGVvLWNoYXQtY29udGFpbmVyXCIpXG4gICBpZih2ZTEgJiYgdmUxLnN0eWxlKSB7XG4gICAgaWYodmUxLnN0eWxlLnZpc2liaWxpdHkgIT09IFwidmlzaWJsZVwiKSB7XG4gICAgICAgIHdpbmRvdy5zZW5kQ2hhbm5lbCA9IHBlZXJDb25uZWN0aW9uLmNyZWF0ZURhdGFDaGFubmVsKCdzZW5kRGF0YUNoYW5uZWwnKTtcbiAgICAgICAgc2VuZENoYW5uZWwuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgICAgIGNvbnNvbGUubG9nKCdDcmVhdGVkIHNlbmQgZGF0YSBjaGFubmVsJyk7XG5cbiAgICAgICAgc2VuZENoYW5uZWwuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsIG9uU2VuZENoYW5uZWxTdGF0ZUNoYW5nZSk7XG4gICAgICAgIHNlbmRDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgb25TZW5kQ2hhbm5lbFN0YXRlQ2hhbmdlKTtcbiAgICAgICAgc2VuZENoYW5uZWwuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvciA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBzZW5kQ2hhbm5lbDonLCBlcnJvcikpOyAgICBcbiAgICB9XG4gICAgdmUxLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIlxuICAgfVxuICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCBwZWVyQ29ubmVjdGlvbi5jcmVhdGVPZmZlcih7XG4gICAgb2ZmZXJUb1JlY2VpdmVBdWRpbzogMSxcbiAgICBvZmZlclRvUmVjZWl2ZVZpZGVvOiAxXG4gIH0pO1xuICBcbiAgY29uc29sZS5sb2coXCJvZmZlciA6IFwiLCBvZmZlcilcbiAgIGF3YWl0IHBlZXJDb25uZWN0aW9uLnNldExvY2FsRGVzY3JpcHRpb24obmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbihvZmZlcikpO1xuICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInZpZGVvLWluaXRpYXRvclwiLCB0cnVlKVxuICAgc29ja2V0LmVtaXQoXCJydGMtdmNoYXQtY29ubi1vZmZlclwiLCBzb2NrZXQuaWQsIHBlZXJJZCwgb2ZmZXIpXG59XG5cbmNvbnN0IGdldE5hbWUgPSAoKSA9PiBcIm5hbWVcIlxuXG5jb25zdCBvbkljZUNhbmRpZGF0ZSA9IGFzeW5jIChwYywgZXZlbnQpID0+IHtcbiAgY29uc3QgcGVlcklkID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBlZXJJZFwiKVxuICBpZihldmVudC5jYW5kaWRhdGUpIHtcbiAgICBzb2NrZXQuZW1pdChcInJ0Yy1hZGQtaWNlY2FuZGlkYXRlXCIsIGV2ZW50LmNhbmRpZGF0ZSwgcGVlcklkKVxuICB9XG4gXG4gIGNvbnNvbGUubG9nKGAke2dldE5hbWUocGMpfSBJQ0UgY2FuZGlkYXRlOlxcbiR7ZXZlbnQuY2FuZGlkYXRlID8gZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSA6ICcobnVsbCknfWApO1xufVxuXG5jb25zdCBvbkljZVN0YXRlQ2hhbmdlID0gKHBjLCBldmVudCkgPT4ge1xuICBpZiAocGMpIHtcbiAgICBjb25zb2xlLmxvZyhgJHtnZXROYW1lKHBjKX0gSUNFIHN0YXRlOiAke3BjLmljZUNvbm5lY3Rpb25TdGF0ZX1gKTtcbiAgICBjb25zb2xlLmxvZygnSUNFIHN0YXRlIGNoYW5nZSBldmVudDogJywgZXZlbnQpO1xuICB9XG59XG5cbmNvbnN0IHNlbmREYXRhID0gKGZpbGUpID0+IHtcbiAgICBpZighZmlsZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGBGaWxlIGlzICR7W2ZpbGUubmFtZSwgZmlsZS5zaXplLCBmaWxlLnR5cGUsIGZpbGUubGFzdE1vZGlmaWVkXS5qb2luKCcgJyl9YCk7XG4gIFxuICAgIC8vIEhhbmRsZSAwIHNpemUgZmlsZXMuXG4gICAgc3RhdHVzTWVzc2FnZS50ZXh0Q29udGVudCA9ICcnO1xuICAgIGRvd25sb2FkQW5jaG9yLnRleHRDb250ZW50ID0gJyc7XG4gICAgaWYgKGZpbGUuc2l6ZSA9PT0gMCkge1xuICAgICAgLy8gYml0cmF0ZURpdi5pbm5lckhUTUwgPSAnJztcbiAgICAgIHN0YXR1c01lc3NhZ2UudGV4dENvbnRlbnQgPSAnRmlsZSBpcyBlbXB0eSwgcGxlYXNlIHNlbGVjdCBhIG5vbi1lbXB0eSBmaWxlJztcbiAgICAgIC8vIGNsb3NlRGF0YUNoYW5uZWxzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHNlbmRQcm9ncmVzcy5tYXggPSBmaWxlLnNpemU7XG4gICAgLy8gcmVjZWl2ZVByb2dyZXNzLm1heCA9IGZpbGUuc2l6ZTtcbiAgICBjb25zdCBjaHVua1NpemUgPSAxNjM4NDtcbiAgICBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBmaWxlUmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IgPT4gY29uc29sZS5lcnJvcignRXJyb3IgcmVhZGluZyBmaWxlOicsIGVycm9yKSk7XG4gICAgZmlsZVJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGV2ZW50ID0+IGNvbnNvbGUubG9nKCdGaWxlIHJlYWRpbmcgYWJvcnRlZDonLCBldmVudCkpO1xuICAgIGZpbGVSZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGUgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ0ZpbGVSZWFkLm9ubG9hZCAnLCBlKTtcbiAgICAgIHNlbmRDaGFubmVsLnNlbmQoZS50YXJnZXQucmVzdWx0KTtcbiAgICAgIG9mZnNldCArPSBlLnRhcmdldC5yZXN1bHQuYnl0ZUxlbmd0aDtcbiAgICAgIC8vIHNlbmRQcm9ncmVzcy52YWx1ZSA9IG9mZnNldDtcbiAgICAgIGlmIChvZmZzZXQgPCBmaWxlLnNpemUpIHtcbiAgICAgICAgcmVhZFNsaWNlKG9mZnNldCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgcmVhZFNsaWNlID0gbyA9PiB7XG4gICAgICBjb25zb2xlLmxvZygncmVhZFNsaWNlICcsIG8pO1xuICAgICAgY29uc3Qgc2xpY2UgPSBmaWxlLnNsaWNlKG9mZnNldCwgbyArIGNodW5rU2l6ZSk7XG4gICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHNsaWNlKTtcbiAgICB9O1xuICAgIHJlYWRTbGljZSgwKTtcbiAgfVxuXG4gIGNvbnN0IGNsb3NlRGF0YUNoYW5uZWxzID0gKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdDbG9zaW5nIGRhdGEgY2hhbm5lbHMnKTtcbiAgICBpZih0eXBlb2Ygc2VuZENoYW5uZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzZW5kQ2hhbm5lbC5jbG9zZSgpO1xuICAgICAgY29uc29sZS5sb2coYENsb3NlZCBkYXRhIGNoYW5uZWwgd2l0aCBsYWJlbDogJHtzZW5kQ2hhbm5lbC5sYWJlbH1gKTtcbiAgICB9XG4gICAgaWYgKHJlY2VpdmVDaGFubmVsKSB7XG4gICAgICByZWNlaXZlQ2hhbm5lbC5jbG9zZSgpO1xuICAgICAgY29uc29sZS5sb2coYENsb3NlZCBkYXRhIGNoYW5uZWwgd2l0aCBsYWJlbDogJHtyZWNlaXZlQ2hhbm5lbC5sYWJlbH1gKTtcbiAgICB9XG4gICAgcGVlckNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAvLyByZW1vdGVDb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgcGVlckNvbm5lY3Rpb24gPSBudWxsO1xuICAgIC8vIHJlbW90ZUNvbm5lY3Rpb24gPSBudWxsO1xuICAgIGNvbnNvbGUubG9nKCdDbG9zZWQgcGVlciBjb25uZWN0aW9ucycpO1xuICBcbiAgICAvLyByZS1lbmFibGUgdGhlIGZpbGUgc2VsZWN0XG4gICAgZmlsZUlucHV0LmRpc2FibGVkID0gZmFsc2U7XG4gICAgLy8gYWJvcnRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgIHNlbmRGaWxlQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gIH1cbiAgXG4gIGNvbnN0IG9uU2VuZENoYW5uZWxTdGF0ZUNoYW5nZSA9ICgpID0+IHtcbiAgICBjb25zdCByZWFkeVN0YXRlID0gc2VuZENoYW5uZWwucmVhZHlTdGF0ZTtcbiAgICBjb25zb2xlLmxvZyhgU2VuZCBjaGFubmVsIHN0YXRlIGlzOiAke3JlYWR5U3RhdGV9YCk7XG4gICAgaWYgKHJlYWR5U3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgY29uc3QgaW5pdGlhdG9yID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInZpZGVvLWluaXRpYXRvclwiKVxuICAgICAgY29uc29sZS5sb2coXCJpbml0aWF0b3IgOiBcIiwgaW5pdGlhdG9yKVxuICAgICAgaWYoaW5pdGlhdG9yKSB7XG4gICAgICAgIHNlbmREYXRhKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICBjb25zdCByZWNlaXZlQ2hhbm5lbENhbGxiYWNrID0gKGV2ZW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1JlY2VpdmUgQ2hhbm5lbCBDYWxsYmFjaycpO1xuICAgIHJlY2VpdmVDaGFubmVsID0gZXZlbnQuY2hhbm5lbDtcbiAgICByZWNlaXZlQ2hhbm5lbC5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICByZWNlaXZlQ2hhbm5lbC5vbm1lc3NhZ2UgPSBvblJlY2VpdmVNZXNzYWdlQ2FsbGJhY2s7XG4gICAgcmVjZWl2ZUNoYW5uZWwub25vcGVuID0gb25SZWNlaXZlQ2hhbm5lbFN0YXRlQ2hhbmdlO1xuICAgIHJlY2VpdmVDaGFubmVsLm9uY2xvc2UgPSBvblJlY2VpdmVDaGFubmVsU3RhdGVDaGFuZ2U7XG4gIFxuICAgIHJlY2VpdmVkU2l6ZSA9IDA7XG4gICAgYml0cmF0ZU1heCA9IDA7XG4gICAgZG93bmxvYWRBbmNob3IudGV4dENvbnRlbnQgPSAnJztcbiAgICBkb3dubG9hZEFuY2hvci5yZW1vdmVBdHRyaWJ1dGUoJ2Rvd25sb2FkJyk7XG4gICAgaWYgKGRvd25sb2FkQW5jaG9yLmhyZWYpIHtcbiAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwoZG93bmxvYWRBbmNob3IuaHJlZik7XG4gICAgICBkb3dubG9hZEFuY2hvci5yZW1vdmVBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICB9XG4gIH1cbiAgXG4gIGNvbnN0IG9uUmVjZWl2ZU1lc3NhZ2VDYWxsYmFjayA9IChldmVudCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCBNZXNzYWdlICR7ZXZlbnQuZGF0YS5ieXRlTGVuZ3RofWApO1xuICAgIHJlY2VpdmVCdWZmZXIucHVzaChldmVudC5kYXRhKTtcbiAgICByZWNlaXZlZFNpemUgKz0gZXZlbnQuZGF0YS5ieXRlTGVuZ3RoO1xuICBcbiAgICAvLyByZWNlaXZlUHJvZ3Jlc3MudmFsdWUgPSByZWNlaXZlZFNpemU7XG4gIFxuICAgIC8vIHdlIGFyZSBhc3N1bWluZyB0aGF0IG91ciBzaWduYWxpbmcgcHJvdG9jb2wgdG9sZFxuICAgIC8vIGFib3V0IHRoZSBleHBlY3RlZCBmaWxlIHNpemUgKGFuZCBuYW1lLCBoYXNoLCBldGMpLlxuICAgIC8vIGNvbnN0IGZpbGUgPSBmaWxlSW5wdXQuZmlsZXNbMF07XG4gICAgaWYgKHJlY2VpdmVkU2l6ZSA9PT0gc2VudEZpbGVTaXplKSB7XG4gICAgICBjb25zdCByZWNlaXZlZCA9IG5ldyBCbG9iKHJlY2VpdmVCdWZmZXIpO1xuICAgICAgcmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICBcbiAgICAgIGRvd25sb2FkQW5jaG9yLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHJlY2VpdmVkKTtcbiAgICAgIGRvd25sb2FkQW5jaG9yLmRvd25sb2FkID0gc2VudEZpbGVOYW1lO1xuICAgICAgZG93bmxvYWRBbmNob3IudGV4dENvbnRlbnQgPVxuICAgICAgICBgQ2xpY2sgdG8gZG93bmxvYWQgJyR7c2VudEZpbGVOYW1lfScgKCR7c2VudEZpbGVTaXplfSBieXRlcylgO1xuICAgICAgZG93bmxvYWRBbmNob3Iuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gIFxuICAgICAgY29uc3QgYml0cmF0ZSA9IE1hdGgucm91bmQocmVjZWl2ZWRTaXplICogOCAvXG4gICAgICAgICgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gdGltZXN0YW1wU3RhcnQpKTtcbiAgICAgIC8vIGJpdHJhdGVEaXYuaW5uZXJIVE1MID1cbiAgICAgIC8vICAgYDxzdHJvbmc+QXZlcmFnZSBCaXRyYXRlOjwvc3Ryb25nPiAke2JpdHJhdGV9IGtiaXRzL3NlYyAobWF4OiAke2JpdHJhdGVNYXh9IGtiaXRzL3NlYylgO1xuICBcbiAgICAvLyAgIGlmIChzdGF0c0ludGVydmFsKSB7XG4gICAgLy8gICAgIGNsZWFySW50ZXJ2YWwoc3RhdHNJbnRlcnZhbCk7XG4gICAgLy8gICAgIHN0YXRzSW50ZXJ2YWwgPSBudWxsO1xuICAgIC8vICAgfVxuICBcbiAgICAgIC8vIGNsb3NlRGF0YUNoYW5uZWxzKCk7XG4gICAgfVxuICB9XG4gIFxuICBjb25zdCBvblJlY2VpdmVDaGFubmVsU3RhdGVDaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVhZHlTdGF0ZSA9IHJlY2VpdmVDaGFubmVsLnJlYWR5U3RhdGU7XG4gICAgY29uc29sZS5sb2coYFJlY2VpdmUgY2hhbm5lbCBzdGF0ZSBpczogJHtyZWFkeVN0YXRlfWApO1xuICAgIGlmIChyZWFkeVN0YXRlID09PSAnb3BlbicpIHtcbiAgICAgIHRpbWVzdGFtcFN0YXJ0ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgIHRpbWVzdGFtcFByZXYgPSB0aW1lc3RhbXBTdGFydDtcbiAgICAgIC8vIHN0YXRzSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChkaXNwbGF5U3RhdHMsIDUwMCk7XG4gICAgICAvLyBhd2FpdCBkaXNwbGF5U3RhdHMoKTtcbiAgICB9XG4gIH1cblxuXG5jb25zdCBSVENIb21lID0gKCkgPT4ge1xuICAgIGNvbnN0IFtwZWVycywgc2V0UGVlcnNdID0gdXNlU3RhdGUoW10pXG4gICAgY29uc3QgW3VzZXJOYW1lLCBzZXRVc2VyTmFtZV0gPSB1c2VTdGF0ZShcIlwiKVxuICAgIGNvbnN0IFtmaWxlLCBzZXRGaWxlXSA9IHVzZVN0YXRlKFwiXCIpXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJSZW5kZXJpbmdcIilcbiAgICAgICAgc2V0VXBTb2NrZXRFdmVudHMoc2V0UGVlcnMpXG4gICAgICAgIGdldEFWUGVybWlzc2lvbnMoKVxuICAgICAgICBzZXR1cFJUQygpXG4gICAgfSwgW10pXG5cbiAgICBjb25zdCByZW5kZXJQZWVycyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuKFxuICAgICAgICAgICAgcGVlcnMubWFwKHBlZXIgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXtwZWVyLmlkfT5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidy0xLzIgYmctZ3JheS0yMDAgYm9yZGVyIGJvcmRlci1kb3VibGUgYm9yZGVyLXJlZC0yMDAgcm91bmRlZC1tZCBweS0yIG15LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwZWVyLmlkfSAtLS0ge3BlZXIubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy0yMCBtci0xMCByb3VuZGVkLW1kIGJnLWJsdWUtNTAwIHRleHQtd2hpdGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge2NhbGxVc2VyKHBlZXIuaWQpOyBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicGVlcklkXCIsIHBlZXIuaWQpfX0+VmlkZW8gQ2FsbDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgY2hhbmdlVXNlck5hbWUgPSAoZSkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0gZS50YXJnZXQudmFsdWVcbiAgICAgICAgc2V0VXNlck5hbWUobmFtZSlcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVGaWxlSW5wdXRDaGFuZ2UgPSAoZSkgPT4ge1xuICAgICAgICBjb25zdCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF1cbiAgICAgICAgaWYgKCFmaWxlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTm8gZmlsZSBjaG9zZW4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldEZpbGUoZmlsZSlcbiAgICAgICAgICAgIHNlbmRGaWxlQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBwZWVySWQgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicGVlcklkXCIpXG4gICAgICAgICAgICBzb2NrZXQuZW1pdChcInNlbmQtZmlsZS1zaXplXCIsIHBlZXJJZCwgZmlsZS5zaXplLCBmaWxlLm5hbWUgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxwPlJUQyBIb21lPC9wPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteS0xMFwiPlxuICAgICAgICAgICAgIHtyZW5kZXJQZWVycygpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm15LTEwIGZsZXggZmxleC1yb3cganVzdGlmeS1zdGFydCBjb250ZW50LWNlbnRlclwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctNjAgdGV4dC1zbSB0ZXh0LWJsYWNrIHBsYWNlaG9sZGVyLWdyYXktNTAwIGJvcmRlciBib3JkZXItYmx1ZS0yMDAgcm91bmRlZC1tZCBweS0yIHBsLTEwXCJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ5b3VyIG5hbWVcIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dXNlck5hbWV9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtjaGFuZ2VVc2VyTmFtZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwidy0yMCBtbC0xMCByb3VuZGVkLW1kIGJnLWdyZWVuLTUwMCB0ZXh0LXdoaXRlXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge3NlbmRNc2codXNlck5hbWUpOyBzZXRVc2VyTmFtZShcIlwiKX19PlNldCBOYW1lPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgaWQ9XCJmaWxlSW5wdXRcIiBuYW1lPVwiZmlsZXNcIiBvbkNoYW5nZT17aGFuZGxlRmlsZUlucHV0Q2hhbmdlfS8+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJ3LTIwIG1yLTEwIHJvdW5kZWQtbWQgYmctYmx1ZS01MDAgdGV4dC13aGl0ZVwiXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkIGlkPVwic2VuZEZpbGVcIiBvbkNsaWNrPXsoKSA9PiBzZW5kRGF0YShmaWxlKX0+U2VuZDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxhIGlkPVwiZG93bmxvYWRcIj48L2E+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPVwic3RhdHVzXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZGVvLWNoYXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWRlby1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGNsYXNzTmFtZT1cInJlbW90ZS12aWRlb1wiIGlkPVwicmVtb3RlLXZpZGVvXCI+PC92aWRlbz5cbiAgICAgICAgICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IG11dGVkIGNsYXNzTmFtZT1cImxvY2FsLXZpZGVvXCIgaWQ9XCJsb2NhbC12aWRlb1wiPjwvdmlkZW8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAgICAgICAudmlkZW8tY2hhdC1jb250YWluZXIge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwIDIwcHg7XG4gICAgICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDMwcHg7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC5yZW1vdGUtdmlkZW8ge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjY2RkZmU3O1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAwcHggM3B4IDZweCByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAubG9jYWwtdmlkZW8ge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNjZGRmZTc7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMjBweDtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDQwcHg7XG4gICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IDBweCAzcHggNnB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTUwcHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYH08L3N0eWxlPlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJUQ0hvbWUiXX0= */\\n/*@ sourceURL=/Users/kapilgahlot/Desktop/code/node/poc/kss/rtc/components/RTCHome.js */\"));\n};\n\n_s(RTCHome, \"ngDMeEUkkmenVxz2gRHE5V0cToQ=\");\n\n_c = RTCHome;\n/* harmony default export */ __webpack_exports__[\"default\"] = (RTCHome);\n\nvar _c;\n\n$RefreshReg$(_c, \"RTCHome\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1JUQ0hvbWUuanM/NmI2NSJdLCJuYW1lcyI6WyJwZWVyQ29ubmVjdGlvbiIsIlJUQ1BlZXJDb25uZWN0aW9uIiwiUlRDU2Vzc2lvbkRlc2NyaXB0aW9uIiwicmVjZWl2ZUJ1ZmZlciIsInJlY2VpdmVkU2l6ZSIsImJ5dGVzUHJldiIsInRpbWVzdGFtcFByZXYiLCJ0aW1lc3RhbXBTdGFydCIsInN0YXRzSW50ZXJ2YWwiLCJiaXRyYXRlTWF4Iiwic2VudEZpbGVOYW1lIiwic2VudEZpbGVTaXplIiwicmVjZWl2ZUNoYW5uZWwiLCJkb3dubG9hZEFuY2hvciIsInNldFVwU29ja2V0RXZlbnRzIiwic2V0UGVlcnMiLCJzb2NrZXQiLCJvbiIsImNvbnNvbGUiLCJsb2ciLCJpZCIsIm1zZyIsInVzZXJzIiwicGVlcnMiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwia2V5IiwicHVzaCIsIm5hbWUiLCJzZW5kZXJJZCIsIm9mZmVyIiwidmUxIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGUiLCJ2aXNpYmlsaXR5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlY2VpdmVDaGFubmVsQ2FsbGJhY2siLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJzZXRSZW1vdGVEZXNjcmlwdGlvbiIsImNyZWF0ZUFuc3dlciIsImFuc3dlciIsInNldExvY2FsRGVzY3JpcHRpb24iLCJlbWl0IiwicmVjZWl2ZXJJZCIsIndpbmRvdyIsImlzQWxyZWFkeUNhbGxpbmciLCJjYWxsVXNlciIsImNhbmRpZGF0ZSIsImFkZEljZUNhbmRpZGF0ZSIsInRoZW4iLCJyZXMiLCJlcnIiLCJzZW5kTXNnIiwidXNlck5hbWUiLCJnZXRBVlBlcm1pc3Npb25zIiwibmF2aWdhdG9yIiwiZ2V0VXNlck1lZGlhIiwidmlkZW8iLCJhdWRpbyIsInN0cmVhbSIsImxvY2FsVmlkZW8iLCJnZXRFbGVtZW50QnlJZCIsInNyY09iamVjdCIsImdldFRyYWNrcyIsImZvckVhY2giLCJ0cmFjayIsImFkZFRyYWNrIiwiZXJyb3IiLCJ3YXJuIiwibWVzc2FnZSIsInNldHVwUlRDIiwiaWNlU2VydmVycyIsInVybHMiLCJlIiwib25JY2VDYW5kaWRhdGUiLCJvbkljZVN0YXRlQ2hhbmdlIiwib250cmFjayIsInN0cmVhbXMiLCJyZW1vdGVWaWRlbyIsInBlZXJJZCIsInNlbmRDaGFubmVsIiwiY3JlYXRlRGF0YUNoYW5uZWwiLCJiaW5hcnlUeXBlIiwib25TZW5kQ2hhbm5lbFN0YXRlQ2hhbmdlIiwiY3JlYXRlT2ZmZXIiLCJvZmZlclRvUmVjZWl2ZUF1ZGlvIiwib2ZmZXJUb1JlY2VpdmVWaWRlbyIsImdldE5hbWUiLCJwYyIsImV2ZW50IiwiZ2V0SXRlbSIsImljZUNvbm5lY3Rpb25TdGF0ZSIsInNlbmREYXRhIiwiZmlsZSIsInNpemUiLCJ0eXBlIiwibGFzdE1vZGlmaWVkIiwiam9pbiIsInN0YXR1c01lc3NhZ2UiLCJ0ZXh0Q29udGVudCIsImNodW5rU2l6ZSIsImZpbGVSZWFkZXIiLCJGaWxlUmVhZGVyIiwib2Zmc2V0Iiwic2VuZCIsInRhcmdldCIsInJlc3VsdCIsImJ5dGVMZW5ndGgiLCJyZWFkU2xpY2UiLCJvIiwic2xpY2UiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImNsb3NlRGF0YUNoYW5uZWxzIiwiY2xvc2UiLCJsYWJlbCIsImZpbGVJbnB1dCIsImRpc2FibGVkIiwic2VuZEZpbGVCdXR0b24iLCJyZWFkeVN0YXRlIiwiaW5pdGlhdG9yIiwiY2hhbm5lbCIsIm9ubWVzc2FnZSIsIm9uUmVjZWl2ZU1lc3NhZ2VDYWxsYmFjayIsIm9ub3BlbiIsIm9uUmVjZWl2ZUNoYW5uZWxTdGF0ZUNoYW5nZSIsIm9uY2xvc2UiLCJyZW1vdmVBdHRyaWJ1dGUiLCJocmVmIiwiVVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiZGF0YSIsInJlY2VpdmVkIiwiQmxvYiIsImNyZWF0ZU9iamVjdFVSTCIsImRvd25sb2FkIiwiZGlzcGxheSIsImJpdHJhdGUiLCJNYXRoIiwicm91bmQiLCJEYXRlIiwiZ2V0VGltZSIsIlJUQ0hvbWUiLCJ1c2VTdGF0ZSIsInNldFVzZXJOYW1lIiwic2V0RmlsZSIsInVzZUVmZmVjdCIsInJlbmRlclBlZXJzIiwicGVlciIsImNoYW5nZVVzZXJOYW1lIiwidmFsdWUiLCJoYW5kbGVGaWxlSW5wdXRDaGFuZ2UiLCJmaWxlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUVBLElBQUlBLGNBQWMsR0FBRyxJQUFyQjtBQUNBLElBQUlDLGlCQUFpQixHQUFHLElBQXhCO0FBQ0EsSUFBSUMscUJBQXFCLEdBQUcsSUFBNUI7QUFDQSxJQUFJQyxhQUFhLEdBQUcsRUFBcEI7QUFDQSxJQUFJQyxZQUFZLEdBQUcsQ0FBbkI7QUFFQSxJQUFJQyxTQUFTLEdBQUcsQ0FBaEI7QUFDQSxJQUFJQyxhQUFhLEdBQUcsQ0FBcEI7QUFDQSxJQUFJQyxjQUFKO0FBQ0EsSUFBSUMsYUFBYSxHQUFHLElBQXBCO0FBQ0EsSUFBSUMsVUFBVSxHQUFHLENBQWpCO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLEVBQW5CO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLENBQW5CO0FBRUEsSUFBSUMsY0FBSjtBQUVBLElBQUlDLGNBQWMsR0FBRyxFQUFyQjs7QUFFQSxJQUFNQyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQUNDLFFBQUQsRUFBYztBQUNwQ0MsbUVBQU0sQ0FBQ0MsRUFBUCxDQUFVLFNBQVYsRUFBcUIsWUFBTTtBQUN2QkMsV0FBTyxDQUFDQyxHQUFSLENBQVksd0JBQVosRUFBc0NILGlFQUFNLENBQUNJLEVBQTdDO0FBQ0gsR0FGRDtBQUlBSixtRUFBTSxDQUFDQyxFQUFQLENBQVUsWUFBVixFQUF3QixZQUFNO0FBQzFCQyxXQUFPLENBQUNDLEdBQVIsQ0FBWSwyQkFBWixFQUF5Q0gsaUVBQU0sQ0FBQ0ksRUFBaEQ7QUFDSCxHQUZEO0FBSUFKLG1FQUFNLENBQUNDLEVBQVAsQ0FBVSxPQUFWLEVBQW1CLFVBQUNJLEdBQUQsRUFBUztBQUN4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aEI7QUFDMkIsV0FBTyxFQUFFO0FBQUEsYUFBTTFELFFBQVEsQ0FBQ0MsSUFBRCxDQUFkO0FBQUEsS0FEcEM7QUFBQSx3Q0FBa0IsOENBQWxCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFGSixFQUlJO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUNJO0FBQUcsTUFBRSxFQUFDLFVBQU47QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBREosRUFFSTtBQUFNLE1BQUUsRUFBQyxRQUFUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUZKLENBSkosQ0FoQkosRUF5Qkk7QUFBQSx3Q0FBZSxzQkFBZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0k7QUFBQSx3Q0FBZSxpQkFBZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0k7QUFBTyxZQUFRLE1BQWY7QUFBeUMsTUFBRSxFQUFDLGNBQTVDO0FBQUEsd0NBQTBCLGNBQTFCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFESixFQUVJO0FBQU8sWUFBUSxNQUFmO0FBQWdCLFNBQUssTUFBckI7QUFBOEMsTUFBRSxFQUFDLGFBQWpEO0FBQUEsd0NBQWdDLGFBQWhDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFGSixDQURKLENBekJKO0FBQUE7QUFBQTtBQUFBLHN3b0JBREo7QUE0REgsQ0F6R0Q7O0dBQU1nRCxPOztLQUFBQSxPO0FBMkdTQSxzRUFBZiIsImZpbGUiOiIuL2NvbXBvbmVudHMvUlRDSG9tZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IHsgc29ja2V0IH0gZnJvbSBcIi4uL3NlcnZpY2VzL3dlYnNvY2tldHNlcnZpY2VcIlxuXG5sZXQgcGVlckNvbm5lY3Rpb24gPSBudWxsXG5sZXQgUlRDUGVlckNvbm5lY3Rpb24gPSBudWxsXG5sZXQgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uID0gbnVsbFxubGV0IHJlY2VpdmVCdWZmZXIgPSBbXTtcbmxldCByZWNlaXZlZFNpemUgPSAwO1xuXG5sZXQgYnl0ZXNQcmV2ID0gMDtcbmxldCB0aW1lc3RhbXBQcmV2ID0gMDtcbmxldCB0aW1lc3RhbXBTdGFydDtcbmxldCBzdGF0c0ludGVydmFsID0gbnVsbDtcbmxldCBiaXRyYXRlTWF4ID0gMDtcbmxldCBzZW50RmlsZU5hbWUgPSBcIlwiO1xubGV0IHNlbnRGaWxlU2l6ZSA9IDA7XG5cbmxldCByZWNlaXZlQ2hhbm5lbDtcblxubGV0IGRvd25sb2FkQW5jaG9yID0ge307XG5cbmNvbnN0IHNldFVwU29ja2V0RXZlbnRzID0gKHNldFBlZXJzKSA9PiB7XG4gICAgc29ja2V0Lm9uKFwiY29ubmVjdFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29ubmVjdGVkIHNvY2tldCBpZCA6IFwiLCBzb2NrZXQuaWQpXG4gICAgfSk7XG4gICAgXG4gICAgc29ja2V0Lm9uKFwiZGlzY29ubmVjdFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGlzY29ubmVjdGVkIHNvY2tldCBpZCA6IFwiLCBzb2NrZXQuaWQpXG4gICAgfSk7XG4gICAgXG4gICAgc29ja2V0Lm9uKFwiaGVsbG9cIiwgKG1zZykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkhlbGxvIDogXCIsIG1zZylcbiAgICB9KVxuICAgIFxuICAgIHNvY2tldC5vbihcInVzZXJzXCIsICh1c2VycykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcInVzZXJzIDogXCIsIHVzZXJzKVxuICAgICAgICBjb25zdCBwZWVycyA9IFtdXG4gICAgICAgIE9iamVjdC5rZXlzKHVzZXJzKS5tYXAoa2V5ID0+IHtcbiAgICAgICAgICAgIHBlZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIGlkOiBrZXksXG4gICAgICAgICAgICAgICAgbmFtZTogdXNlcnNba2V5XVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgc2V0UGVlcnMocGVlcnMpXG4gICAgfSlcblxuICAgIHNvY2tldC5vbihcInJ0Yy12Y2hhdC1vZmZlclwiLCBhc3luYyAoc2VuZGVySWQsIG9mZmVyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicnRjLXZjaGF0LW9mZmVyIDogXCIsIHNlbmRlcklkLCBvZmZlcilcbiAgICAgICAgbGV0IHZlMSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudmlkZW8tY2hhdC1jb250YWluZXJcIilcbiAgICAgICAgaWYodmUxICYmIHZlMS5zdHlsZSkge1xuICAgICAgICAgICAgaWYodmUxLnN0eWxlLnZpc2liaWxpdHkgIT09IFwidmlzaWJsZVwiKSB7XG4gICAgICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignZGF0YWNoYW5uZWwnLCByZWNlaXZlQ2hhbm5lbENhbGxiYWNrKVxuICAgICAgICAgICAgICAgIGRvd25sb2FkQW5jaG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYSNkb3dubG9hZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmUxLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIlxuICAgICAgICB9XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJ2aWRlby1yZWNlaXZlclwiLCB0cnVlKVxuICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicGVlcklkXCIsIHNlbmRlcklkKVxuICAgICAgICBhd2FpdCBwZWVyQ29ubmVjdGlvbi5zZXRSZW1vdGVEZXNjcmlwdGlvbihcbiAgICAgICAgICAgIG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24ob2ZmZXIpXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgcGVlckNvbm5lY3Rpb24uY3JlYXRlQW5zd2VyKClcbiAgICAgICAgYXdhaXQgcGVlckNvbm5lY3Rpb24uc2V0TG9jYWxEZXNjcmlwdGlvbihuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKGFuc3dlcikpXG4gICAgICAgIHNvY2tldC5lbWl0KFwicnRjLXZjaGF0LWNvbm4tYW5zd2VyXCIsIHNvY2tldC5pZCwgc2VuZGVySWQsIGFuc3dlciApXG4gICAgfSlcbiAgICBzb2NrZXQub24oXCJydGMtdmNoYXQtYW5zd2VyXCIsIGFzeW5jIChyZWNlaXZlcklkLCBhbnN3ZXIpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJydGMtdmNoYXQtYW5zd2VyIDogXCIsIHJlY2VpdmVySWQsIGFuc3dlcilcbiAgICAgICAgYXdhaXQgcGVlckNvbm5lY3Rpb24uc2V0UmVtb3RlRGVzY3JpcHRpb24oXG4gICAgICAgICAgICBuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKGFuc3dlcilcbiAgICAgICAgKVxuICAgICAgICBpZiAoIXdpbmRvdy5pc0FscmVhZHlDYWxsaW5nKSB7XG4gICAgICAgICAgICBjYWxsVXNlcihyZWNlaXZlcklkKTtcbiAgICAgICAgICAgIHdpbmRvdy5pc0FscmVhZHlDYWxsaW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgc29ja2V0Lm9uKFwicnRjLWljZS1jYW5kaWRhdGVcIiwgKGNhbmRpZGF0ZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcInJ0Yy1pY2UtY2FuZGlkYXRlIDogXCIsIGNhbmRpZGF0ZSlcbiAgICAgICAgcGVlckNvbm5lY3Rpb24uYWRkSWNlQ2FuZGlkYXRlKGNhbmRpZGF0ZSlcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImluaXRpYXRvciBhZGQgaWNlY2FuZGlkYXRlIHN1Y2Nlc3M6IFwiLCByZXMpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImluaXRpYXRvciBhZGQgaWNlY2FuZGlkYXRlIGVycm9yIDogXCIsIGVycilcbiAgICAgICAgICAgIH0pXG4gICAgfSlcbiAgICBzb2NrZXQub24oXCJydGMtc2VuZGluZy1maWxlXCIsIChzZW50RmlsZVNpemUsIHNlbnRGaWxlTmFtZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcInNlbnRGaWxlU2l6ZSA6IFwiLCBzZW50RmlsZVNpemUpXG4gICAgICAgIGNvbnNvbGUubG9nKFwic2VudEZpbGVOYW1lIDogXCIsIHNlbnRGaWxlTmFtZSlcbiAgICB9KVxufVxuXG5jb25zdCBzZW5kTXNnID0gKHVzZXJOYW1lKSA9PiB7XG4gICAgc29ja2V0LmVtaXQoXCJoaVwiLCBgJHtzb2NrZXQuaWR9YCwgdXNlck5hbWUpXG59XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgUlRDUGVlckNvbm5lY3Rpb24gPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb25cbiAgICBSVENTZXNzaW9uRGVzY3JpcHRpb24gPSB3aW5kb3cuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uXG59XG5cbmNvbnN0IGdldEFWUGVybWlzc2lvbnMgPSAoKSA9PiB7XG4gICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYShcbiAgICAgICAgeyB2aWRlbzogdHJ1ZSwgYXVkaW86IHRydWUgfSxcbiAgICAgICAgc3RyZWFtID0+IHtcbiAgICAgICAgICBjb25zdCBsb2NhbFZpZGVvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2NhbC12aWRlb1wiKTtcbiAgICAgICAgICBpZiAobG9jYWxWaWRlbykge1xuICAgICAgICAgICAgbG9jYWxWaWRlby5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHBlZXJDb25uZWN0aW9uLmFkZFRyYWNrKHRyYWNrLCBzdHJlYW0pKVxuICAgICAgICB9LFxuICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgKVxufVxuXG5jb25zdCBzZXR1cFJUQyA9ICgpID0+IHtcbiAgICBwZWVyQ29ubmVjdGlvbiA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbih7XG4gICAgICAgIGljZVNlcnZlcnM6IFtcbiAgICAgICAgICAgIHt1cmxzOiAnc3R1bjpzdHVuLmwuZ29vZ2xlLmNvbToxOTMwMid9XG4gICAgICAgIF1cbiAgICB9KTtcblxuICAgIHBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNhbmRpZGF0ZScsIGUgPT4gb25JY2VDYW5kaWRhdGUocGVlckNvbm5lY3Rpb24sIGUpKVxuICAgIHBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsIGUgPT4gb25JY2VTdGF0ZUNoYW5nZShwZWVyQ29ubmVjdGlvbiwgZSkpXG5cbiAgICBwZWVyQ29ubmVjdGlvbi5vbnRyYWNrID0gZnVuY3Rpb24oeyBzdHJlYW1zIH0pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJnb3Qgc3RlYW0gOiBcIiwgc3RyZWFtcylcbiAgICAgICBjb25zdCByZW1vdGVWaWRlbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVtb3RlLXZpZGVvXCIpO1xuICAgICAgIGlmIChyZW1vdGVWaWRlbykge1xuICAgICAgICAgcmVtb3RlVmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtc1swXTtcbiAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBjYWxsVXNlciA9IGFzeW5jIChwZWVySWQpID0+IHtcbiAgIGNvbnNvbGUubG9nKFwiY2FsbGluZyBwZWVyIDogXCIsIHBlZXJJZClcbiAgIGxldCB2ZTEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnZpZGVvLWNoYXQtY29udGFpbmVyXCIpXG4gICBpZih2ZTEgJiYgdmUxLnN0eWxlKSB7XG4gICAgaWYodmUxLnN0eWxlLnZpc2liaWxpdHkgIT09IFwidmlzaWJsZVwiKSB7XG4gICAgICAgIHdpbmRvdy5zZW5kQ2hhbm5lbCA9IHBlZXJDb25uZWN0aW9uLmNyZWF0ZURhdGFDaGFubmVsKCdzZW5kRGF0YUNoYW5uZWwnKTtcbiAgICAgICAgc2VuZENoYW5uZWwuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgICAgIGNvbnNvbGUubG9nKCdDcmVhdGVkIHNlbmQgZGF0YSBjaGFubmVsJyk7XG5cbiAgICAgICAgc2VuZENoYW5uZWwuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsIG9uU2VuZENoYW5uZWxTdGF0ZUNoYW5nZSk7XG4gICAgICAgIHNlbmRDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgb25TZW5kQ2hhbm5lbFN0YXRlQ2hhbmdlKTtcbiAgICAgICAgc2VuZENoYW5uZWwuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvciA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBzZW5kQ2hhbm5lbDonLCBlcnJvcikpOyAgICBcbiAgICB9XG4gICAgdmUxLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIlxuICAgfVxuICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCBwZWVyQ29ubmVjdGlvbi5jcmVhdGVPZmZlcih7XG4gICAgb2ZmZXJUb1JlY2VpdmVBdWRpbzogMSxcbiAgICBvZmZlclRvUmVjZWl2ZVZpZGVvOiAxXG4gIH0pO1xuICBcbiAgY29uc29sZS5sb2coXCJvZmZlciA6IFwiLCBvZmZlcilcbiAgIGF3YWl0IHBlZXJDb25uZWN0aW9uLnNldExvY2FsRGVzY3JpcHRpb24obmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbihvZmZlcikpO1xuICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInZpZGVvLWluaXRpYXRvclwiLCB0cnVlKVxuICAgc29ja2V0LmVtaXQoXCJydGMtdmNoYXQtY29ubi1vZmZlclwiLCBzb2NrZXQuaWQsIHBlZXJJZCwgb2ZmZXIpXG59XG5cbmNvbnN0IGdldE5hbWUgPSAoKSA9PiBcIm5hbWVcIlxuXG5jb25zdCBvbkljZUNhbmRpZGF0ZSA9IGFzeW5jIChwYywgZXZlbnQpID0+IHtcbiAgY29uc3QgcGVlcklkID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInBlZXJJZFwiKVxuICBpZihldmVudC5jYW5kaWRhdGUpIHtcbiAgICBzb2NrZXQuZW1pdChcInJ0Yy1hZGQtaWNlY2FuZGlkYXRlXCIsIGV2ZW50LmNhbmRpZGF0ZSwgcGVlcklkKVxuICB9XG4gXG4gIGNvbnNvbGUubG9nKGAke2dldE5hbWUocGMpfSBJQ0UgY2FuZGlkYXRlOlxcbiR7ZXZlbnQuY2FuZGlkYXRlID8gZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSA6ICcobnVsbCknfWApO1xufVxuXG5jb25zdCBvbkljZVN0YXRlQ2hhbmdlID0gKHBjLCBldmVudCkgPT4ge1xuICBpZiAocGMpIHtcbiAgICBjb25zb2xlLmxvZyhgJHtnZXROYW1lKHBjKX0gSUNFIHN0YXRlOiAke3BjLmljZUNvbm5lY3Rpb25TdGF0ZX1gKTtcbiAgICBjb25zb2xlLmxvZygnSUNFIHN0YXRlIGNoYW5nZSBldmVudDogJywgZXZlbnQpO1xuICB9XG59XG5cbmNvbnN0IHNlbmREYXRhID0gKGZpbGUpID0+IHtcbiAgICBpZighZmlsZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGBGaWxlIGlzICR7W2ZpbGUubmFtZSwgZmlsZS5zaXplLCBmaWxlLnR5cGUsIGZpbGUubGFzdE1vZGlmaWVkXS5qb2luKCcgJyl9YCk7XG4gIFxuICAgIC8vIEhhbmRsZSAwIHNpemUgZmlsZXMuXG4gICAgc3RhdHVzTWVzc2FnZS50ZXh0Q29udGVudCA9ICcnO1xuICAgIGRvd25sb2FkQW5jaG9yLnRleHRDb250ZW50ID0gJyc7XG4gICAgaWYgKGZpbGUuc2l6ZSA9PT0gMCkge1xuICAgICAgLy8gYml0cmF0ZURpdi5pbm5lckhUTUwgPSAnJztcbiAgICAgIHN0YXR1c01lc3NhZ2UudGV4dENvbnRlbnQgPSAnRmlsZSBpcyBlbXB0eSwgcGxlYXNlIHNlbGVjdCBhIG5vbi1lbXB0eSBmaWxlJztcbiAgICAgIC8vIGNsb3NlRGF0YUNoYW5uZWxzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHNlbmRQcm9ncmVzcy5tYXggPSBmaWxlLnNpemU7XG4gICAgLy8gcmVjZWl2ZVByb2dyZXNzLm1heCA9IGZpbGUuc2l6ZTtcbiAgICBjb25zdCBjaHVua1NpemUgPSAxNjM4NDtcbiAgICBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBmaWxlUmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IgPT4gY29uc29sZS5lcnJvcignRXJyb3IgcmVhZGluZyBmaWxlOicsIGVycm9yKSk7XG4gICAgZmlsZVJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGV2ZW50ID0+IGNvbnNvbGUubG9nKCdGaWxlIHJlYWRpbmcgYWJvcnRlZDonLCBldmVudCkpO1xuICAgIGZpbGVSZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGUgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ0ZpbGVSZWFkLm9ubG9hZCAnLCBlKTtcbiAgICAgIHNlbmRDaGFubmVsLnNlbmQoZS50YXJnZXQucmVzdWx0KTtcbiAgICAgIG9mZnNldCArPSBlLnRhcmdldC5yZXN1bHQuYnl0ZUxlbmd0aDtcbiAgICAgIC8vIHNlbmRQcm9ncmVzcy52YWx1ZSA9IG9mZnNldDtcbiAgICAgIGlmIChvZmZzZXQgPCBmaWxlLnNpemUpIHtcbiAgICAgICAgcmVhZFNsaWNlKG9mZnNldCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgcmVhZFNsaWNlID0gbyA9PiB7XG4gICAgICBjb25zb2xlLmxvZygncmVhZFNsaWNlICcsIG8pO1xuICAgICAgY29uc3Qgc2xpY2UgPSBmaWxlLnNsaWNlKG9mZnNldCwgbyArIGNodW5rU2l6ZSk7XG4gICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHNsaWNlKTtcbiAgICB9O1xuICAgIHJlYWRTbGljZSgwKTtcbiAgfVxuXG4gIGNvbnN0IGNsb3NlRGF0YUNoYW5uZWxzID0gKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdDbG9zaW5nIGRhdGEgY2hhbm5lbHMnKTtcbiAgICBpZih0eXBlb2Ygc2VuZENoYW5uZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzZW5kQ2hhbm5lbC5jbG9zZSgpO1xuICAgICAgY29uc29sZS5sb2coYENsb3NlZCBkYXRhIGNoYW5uZWwgd2l0aCBsYWJlbDogJHtzZW5kQ2hhbm5lbC5sYWJlbH1gKTtcbiAgICB9XG4gICAgaWYgKHJlY2VpdmVDaGFubmVsKSB7XG4gICAgICByZWNlaXZlQ2hhbm5lbC5jbG9zZSgpO1xuICAgICAgY29uc29sZS5sb2coYENsb3NlZCBkYXRhIGNoYW5uZWwgd2l0aCBsYWJlbDogJHtyZWNlaXZlQ2hhbm5lbC5sYWJlbH1gKTtcbiAgICB9XG4gICAgcGVlckNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAvLyByZW1vdGVDb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgcGVlckNvbm5lY3Rpb24gPSBudWxsO1xuICAgIC8vIHJlbW90ZUNvbm5lY3Rpb24gPSBudWxsO1xuICAgIGNvbnNvbGUubG9nKCdDbG9zZWQgcGVlciBjb25uZWN0aW9ucycpO1xuICBcbiAgICAvLyByZS1lbmFibGUgdGhlIGZpbGUgc2VsZWN0XG4gICAgZmlsZUlucHV0LmRpc2FibGVkID0gZmFsc2U7XG4gICAgLy8gYWJvcnRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgIHNlbmRGaWxlQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gIH1cbiAgXG4gIGNvbnN0IG9uU2VuZENoYW5uZWxTdGF0ZUNoYW5nZSA9ICgpID0+IHtcbiAgICBjb25zdCByZWFkeVN0YXRlID0gc2VuZENoYW5uZWwucmVhZHlTdGF0ZTtcbiAgICBjb25zb2xlLmxvZyhgU2VuZCBjaGFubmVsIHN0YXRlIGlzOiAke3JlYWR5U3RhdGV9YCk7XG4gICAgaWYgKHJlYWR5U3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgY29uc3QgaW5pdGlhdG9yID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInZpZGVvLWluaXRpYXRvclwiKVxuICAgICAgY29uc29sZS5sb2coXCJpbml0aWF0b3IgOiBcIiwgaW5pdGlhdG9yKVxuICAgICAgaWYoaW5pdGlhdG9yKSB7XG4gICAgICAgIHNlbmREYXRhKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICBjb25zdCByZWNlaXZlQ2hhbm5lbENhbGxiYWNrID0gKGV2ZW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1JlY2VpdmUgQ2hhbm5lbCBDYWxsYmFjaycpO1xuICAgIHJlY2VpdmVDaGFubmVsID0gZXZlbnQuY2hhbm5lbDtcbiAgICByZWNlaXZlQ2hhbm5lbC5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICByZWNlaXZlQ2hhbm5lbC5vbm1lc3NhZ2UgPSBvblJlY2VpdmVNZXNzYWdlQ2FsbGJhY2s7XG4gICAgcmVjZWl2ZUNoYW5uZWwub25vcGVuID0gb25SZWNlaXZlQ2hhbm5lbFN0YXRlQ2hhbmdlO1xuICAgIHJlY2VpdmVDaGFubmVsLm9uY2xvc2UgPSBvblJlY2VpdmVDaGFubmVsU3RhdGVDaGFuZ2U7XG4gIFxuICAgIHJlY2VpdmVkU2l6ZSA9IDA7XG4gICAgYml0cmF0ZU1heCA9IDA7XG4gICAgZG93bmxvYWRBbmNob3IudGV4dENvbnRlbnQgPSAnJztcbiAgICBkb3dubG9hZEFuY2hvci5yZW1vdmVBdHRyaWJ1dGUoJ2Rvd25sb2FkJyk7XG4gICAgaWYgKGRvd25sb2FkQW5jaG9yLmhyZWYpIHtcbiAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwoZG93bmxvYWRBbmNob3IuaHJlZik7XG4gICAgICBkb3dubG9hZEFuY2hvci5yZW1vdmVBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICB9XG4gIH1cbiAgXG4gIGNvbnN0IG9uUmVjZWl2ZU1lc3NhZ2VDYWxsYmFjayA9IChldmVudCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCBNZXNzYWdlICR7ZXZlbnQuZGF0YS5ieXRlTGVuZ3RofWApO1xuICAgIHJlY2VpdmVCdWZmZXIucHVzaChldmVudC5kYXRhKTtcbiAgICByZWNlaXZlZFNpemUgKz0gZXZlbnQuZGF0YS5ieXRlTGVuZ3RoO1xuICBcbiAgICAvLyByZWNlaXZlUHJvZ3Jlc3MudmFsdWUgPSByZWNlaXZlZFNpemU7XG4gIFxuICAgIC8vIHdlIGFyZSBhc3N1bWluZyB0aGF0IG91ciBzaWduYWxpbmcgcHJvdG9jb2wgdG9sZFxuICAgIC8vIGFib3V0IHRoZSBleHBlY3RlZCBmaWxlIHNpemUgKGFuZCBuYW1lLCBoYXNoLCBldGMpLlxuICAgIC8vIGNvbnN0IGZpbGUgPSBmaWxlSW5wdXQuZmlsZXNbMF07XG4gICAgaWYgKHJlY2VpdmVkU2l6ZSA9PT0gc2VudEZpbGVTaXplKSB7XG4gICAgICBjb25zdCByZWNlaXZlZCA9IG5ldyBCbG9iKHJlY2VpdmVCdWZmZXIpO1xuICAgICAgcmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICBcbiAgICAgIGRvd25sb2FkQW5jaG9yLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHJlY2VpdmVkKTtcbiAgICAgIGRvd25sb2FkQW5jaG9yLmRvd25sb2FkID0gc2VudEZpbGVOYW1lO1xuICAgICAgZG93bmxvYWRBbmNob3IudGV4dENvbnRlbnQgPVxuICAgICAgICBgQ2xpY2sgdG8gZG93bmxvYWQgJyR7c2VudEZpbGVOYW1lfScgKCR7c2VudEZpbGVTaXplfSBieXRlcylgO1xuICAgICAgZG93bmxvYWRBbmNob3Iuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gIFxuICAgICAgY29uc3QgYml0cmF0ZSA9IE1hdGgucm91bmQocmVjZWl2ZWRTaXplICogOCAvXG4gICAgICAgICgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gdGltZXN0YW1wU3RhcnQpKTtcbiAgICAgIC8vIGJpdHJhdGVEaXYuaW5uZXJIVE1MID1cbiAgICAgIC8vICAgYDxzdHJvbmc+QXZlcmFnZSBCaXRyYXRlOjwvc3Ryb25nPiAke2JpdHJhdGV9IGtiaXRzL3NlYyAobWF4OiAke2JpdHJhdGVNYXh9IGtiaXRzL3NlYylgO1xuICBcbiAgICAvLyAgIGlmIChzdGF0c0ludGVydmFsKSB7XG4gICAgLy8gICAgIGNsZWFySW50ZXJ2YWwoc3RhdHNJbnRlcnZhbCk7XG4gICAgLy8gICAgIHN0YXRzSW50ZXJ2YWwgPSBudWxsO1xuICAgIC8vICAgfVxuICBcbiAgICAgIC8vIGNsb3NlRGF0YUNoYW5uZWxzKCk7XG4gICAgfVxuICB9XG4gIFxuICBjb25zdCBvblJlY2VpdmVDaGFubmVsU3RhdGVDaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVhZHlTdGF0ZSA9IHJlY2VpdmVDaGFubmVsLnJlYWR5U3RhdGU7XG4gICAgY29uc29sZS5sb2coYFJlY2VpdmUgY2hhbm5lbCBzdGF0ZSBpczogJHtyZWFkeVN0YXRlfWApO1xuICAgIGlmIChyZWFkeVN0YXRlID09PSAnb3BlbicpIHtcbiAgICAgIHRpbWVzdGFtcFN0YXJ0ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgIHRpbWVzdGFtcFByZXYgPSB0aW1lc3RhbXBTdGFydDtcbiAgICAgIC8vIHN0YXRzSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChkaXNwbGF5U3RhdHMsIDUwMCk7XG4gICAgICAvLyBhd2FpdCBkaXNwbGF5U3RhdHMoKTtcbiAgICB9XG4gIH1cblxuXG5jb25zdCBSVENIb21lID0gKCkgPT4ge1xuICAgIGNvbnN0IFtwZWVycywgc2V0UGVlcnNdID0gdXNlU3RhdGUoW10pXG4gICAgY29uc3QgW3VzZXJOYW1lLCBzZXRVc2VyTmFtZV0gPSB1c2VTdGF0ZShcIlwiKVxuICAgIGNvbnN0IFtmaWxlLCBzZXRGaWxlXSA9IHVzZVN0YXRlKFwiXCIpXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJSZW5kZXJpbmdcIilcbiAgICAgICAgc2V0VXBTb2NrZXRFdmVudHMoc2V0UGVlcnMpXG4gICAgICAgIGdldEFWUGVybWlzc2lvbnMoKVxuICAgICAgICBzZXR1cFJUQygpXG4gICAgfSwgW10pXG5cbiAgICBjb25zdCByZW5kZXJQZWVycyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuKFxuICAgICAgICAgICAgcGVlcnMubWFwKHBlZXIgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXtwZWVyLmlkfT5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidy0xLzIgYmctZ3JheS0yMDAgYm9yZGVyIGJvcmRlci1kb3VibGUgYm9yZGVyLXJlZC0yMDAgcm91bmRlZC1tZCBweS0yIG15LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwZWVyLmlkfSAtLS0ge3BlZXIubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy0yMCBtci0xMCByb3VuZGVkLW1kIGJnLWJsdWUtNTAwIHRleHQtd2hpdGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge2NhbGxVc2VyKHBlZXIuaWQpOyBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicGVlcklkXCIsIHBlZXIuaWQpfX0+VmlkZW8gQ2FsbDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgY2hhbmdlVXNlck5hbWUgPSAoZSkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0gZS50YXJnZXQudmFsdWVcbiAgICAgICAgc2V0VXNlck5hbWUobmFtZSlcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVGaWxlSW5wdXRDaGFuZ2UgPSAoZSkgPT4ge1xuICAgICAgICBjb25zdCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF1cbiAgICAgICAgaWYgKCFmaWxlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTm8gZmlsZSBjaG9zZW4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldEZpbGUoZmlsZSlcbiAgICAgICAgICAgIHNlbmRGaWxlQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBwZWVySWQgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicGVlcklkXCIpXG4gICAgICAgICAgICBzb2NrZXQuZW1pdChcInNlbmQtZmlsZS1zaXplXCIsIHBlZXJJZCwgZmlsZS5zaXplLCBmaWxlLm5hbWUgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxwPlJUQyBIb21lPC9wPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteS0xMFwiPlxuICAgICAgICAgICAgIHtyZW5kZXJQZWVycygpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm15LTEwIGZsZXggZmxleC1yb3cganVzdGlmeS1zdGFydCBjb250ZW50LWNlbnRlclwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctNjAgdGV4dC1zbSB0ZXh0LWJsYWNrIHBsYWNlaG9sZGVyLWdyYXktNTAwIGJvcmRlciBib3JkZXItYmx1ZS0yMDAgcm91bmRlZC1tZCBweS0yIHBsLTEwXCJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ5b3VyIG5hbWVcIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dXNlck5hbWV9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtjaGFuZ2VVc2VyTmFtZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwidy0yMCBtbC0xMCByb3VuZGVkLW1kIGJnLWdyZWVuLTUwMCB0ZXh0LXdoaXRlXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge3NlbmRNc2codXNlck5hbWUpOyBzZXRVc2VyTmFtZShcIlwiKX19PlNldCBOYW1lPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgaWQ9XCJmaWxlSW5wdXRcIiBuYW1lPVwiZmlsZXNcIiBvbkNoYW5nZT17aGFuZGxlRmlsZUlucHV0Q2hhbmdlfS8+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJ3LTIwIG1yLTEwIHJvdW5kZWQtbWQgYmctYmx1ZS01MDAgdGV4dC13aGl0ZVwiXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkIGlkPVwic2VuZEZpbGVcIiBvbkNsaWNrPXsoKSA9PiBzZW5kRGF0YShmaWxlKX0+U2VuZDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxhIGlkPVwiZG93bmxvYWRcIj48L2E+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPVwic3RhdHVzXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZGVvLWNoYXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWRlby1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGNsYXNzTmFtZT1cInJlbW90ZS12aWRlb1wiIGlkPVwicmVtb3RlLXZpZGVvXCI+PC92aWRlbz5cbiAgICAgICAgICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IG11dGVkIGNsYXNzTmFtZT1cImxvY2FsLXZpZGVvXCIgaWQ9XCJsb2NhbC12aWRlb1wiPjwvdmlkZW8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAgICAgICAudmlkZW8tY2hhdC1jb250YWluZXIge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwIDIwcHg7XG4gICAgICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDMwcHg7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC5yZW1vdGUtdmlkZW8ge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjY2RkZmU3O1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAwcHggM3B4IDZweCByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAubG9jYWwtdmlkZW8ge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNjZGRmZTc7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMjBweDtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDQwcHg7XG4gICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IDBweCAzcHggNnB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTUwcHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYH08L3N0eWxlPlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJUQ0hvbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/RTCHome.js\n");

/***/ })

})